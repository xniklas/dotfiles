#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Arrays to track installations
FAILED_PACKAGES=()
FAILED_SERVICES=()

# Function to print colored output
print_status() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check internet connection
check_internet() {
  print_status "Checking internet connection..."
  if ping -c 3 8.8.8.8 &>/dev/null; then
    print_success "Internet connection available"
    return 0
  else
    print_error "No internet connection available"
    exit 1
  fi
}

# Function to check if running as sudo
check_sudo() {
  print_status "Checking if script is run as sudo..."
  if [[ $EUID -eq 0 ]]; then
    print_error "This script should NOT be run as sudo/root"
    print_error "The script will use sudo when needed for specific commands"
    exit 1
  else
    print_success "Script is not running as sudo"
  fi
}

# Function to select GPU packages
select_gpu() {
  print_status "GPU package selection"
  echo "Please select your GPU type:"
  echo "1) AMD"
  echo "2) NVIDIA"
  echo "3) Intel"
  echo "4) None/Skip GPU packages"

  while true; do
    read -p "Enter your choice (1-4): " gpu_choice
    case $gpu_choice in
    1)
      GPU_PACKAGE="amd.txt"
      print_success "AMD GPU packages selected"
      break
      ;;
    2)
      GPU_PACKAGE="nvidia.txt"
      print_success "NVIDIA GPU packages selected"
      break
      ;;
    3)
      GPU_PACKAGE="intel.txt"
      print_success "Intel GPU packages selected"
      break
      ;;
    4)
      GPU_PACKAGE=""
      print_success "No GPU packages selected"
      break
      ;;
    *)
      print_error "Invalid choice. Please enter 1, 2, 3, or 4."
      ;;
    esac
  done
}

# Function to enable multilib
enable_multilib() {
  print_status "Enabling multilib for pacman..."

  # Check if multilib is already enabled
  if grep -q "^\[multilib\]" /etc/pacman.conf; then
    print_success "Multilib is already enabled"
    return 0
  fi

  # Enable multilib
  sudo sed -i '/^#\[multilib\]/,/^#Include = \/etc\/pacman.d\/mirrorlist/ s/^#//' /etc/pacman.conf

  if grep -q "^\[multilib\]" /etc/pacman.conf; then
    print_success "Multilib enabled successfully"
    sudo pacman -Sy
  else
    print_error "Failed to enable multilib"
    exit 1
  fi
}

# Function to run system update
system_update() {
  print_status "Running system update..."
  if sudo pacman -Syu --noconfirm; then
    print_success "System update completed"
  else
    print_error "System update failed"
    exit 1
  fi
}

# Function to setup reflector
setup_reflector() {
  print_status "Installing and configuring reflector..."

  if sudo pacman -S --noconfirm reflector; then
    print_success "Reflector installed"
  else
    print_error "Failed to install reflector"
    exit 1
  fi

  print_status "Optimizing mirrors for Germany, Netherlands, and France..."
  if sudo reflector --country Germany,Netherlands,France --protocol https --latest 10 --sort rate --save /etc/pacman.d/mirrorlist; then
    print_success "Mirrors optimized successfully"
    sudo pacman -Sy
  else
    print_error "Failed to optimize mirrors"
    exit 1
  fi
}

# Function to install yay
install_yay() {
  print_status "Installing yay package manager..."

  # Check if yay is already installed
  if command -v yay &>/dev/null; then
    print_success "Yay is already installed"
    return 0
  fi

  # Install yay
  cd /tmp
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si --noconfirm
  cd ~

  if command -v yay &>/dev/null; then
    print_success "Yay installed successfully"
  else
    print_error "Failed to install yay"
    exit 1
  fi
}

# Function to install packages from file
install_packages_from_file() {
  local file="$1"
  local description="$2"

  if [[ ! -f "$file" ]]; then
    print_warning "Package file $file not found, skipping $description"
    return 0
  fi

  print_status "Installing $description..."

  while IFS= read -r package || [[ -n "$package" ]]; do
    # Skip empty lines and comments
    [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue

    package=$(echo "$package" | xargs) # Trim whitespace
    print_status "Installing $package..."

    if yay -S --noconfirm "$package"; then
      print_success "Successfully installed $package"
    else
      print_error "Failed to install $package"
      FAILED_PACKAGES+=("$package")
    fi
  done <"$file"
}

# Function to install packages
install_packages() {
  print_status "Installing packages..."

  # Install main packages
  install_packages_from_file "$HOME/.config/yadm/packages/packages.txt" "main packages"

  # Install GPU-specific packages if selected
  if [[ -n "$GPU_PACKAGE" ]]; then
    install_packages_from_file "$HOME/.config/yadm/packages/$GPU_PACKAGE" "GPU packages"
  fi
}

# Function to enable system services
enable_system_services() {
  local file="$HOME/.config/yadm/packages/system_services.txt"

  if [[ ! -f "$file" ]]; then
    print_warning "System services file $file not found, skipping"
    return 0
  fi

  print_status "Enabling system services..."

  while IFS= read -r service || [[ -n "$service" ]]; do
    # Skip empty lines and comments
    [[ -z "$service" || "$service" =~ ^[[:space:]]*# ]] && continue

    service=$(echo "$service" | xargs) # Trim whitespace
    print_status "Enabling system service: $service"

    if sudo systemctl enable --now "$service"; then
      print_success "Successfully enabled $service"
    else
      print_error "Failed to enable $service"
      FAILED_SERVICES+=("$service (system)")
    fi
  done <"$file"
}

# Function to enable user services
enable_user_services() {
  local file="$HOME/.config/yadm/packages/user_services.txt"

  if [[ ! -f "$file" ]]; then
    print_warning "User services file $file not found, skipping"
    return 0
  fi

  print_status "Enabling user services..."

  while IFS= read -r service || [[ -n "$service" ]]; do
    # Skip empty lines and comments
    [[ -z "$service" || "$service" =~ ^[[:space:]]*# ]] && continue

    service=$(echo "$service" | xargs) # Trim whitespace
    print_status "Enabling user service: $service"

    if systemctl --user enable --now "$service"; then
      print_success "Successfully enabled user service $service"
    else
      print_error "Failed to enable user service $service"
      FAILED_SERVICES+=("$service (user)")
    fi
  done <"$file"
}

# Function to install uv
install_uv() {
  print_status "Installing uv (Python package manager)..."

  if command -v uv &>/dev/null; then
    print_success "uv is already installed"
    return 0
  fi

  if curl -LsSf https://astral.sh/uv/install.sh | sh; then
    print_success "uv installed successfully"
    # Source the shell profile to make uv available
    source ~/.bashrc 2>/dev/null || source ~/.zshrc 2>/dev/null || true
  else
    print_error "Failed to install uv"
    FAILED_PACKAGES+=("uv")
  fi
}

# Function to install mpv uosc
install_mpv_uosc() {
  print_status "Installing mpv uosc..."

  # Create mpv scripts directory if it doesn't exist
  mkdir -p ~/.config/mpv/scripts

  # Download uosc
  if curl -L https://github.com/tomasklaen/uosc/releases/latest/download/uosc.zip -o /tmp/uosc.zip; then
    cd /tmp
    unzip -o uosc.zip -d ~/.config/mpv/
    print_success "mpv uosc installed successfully"
  else
    print_error "Failed to install mpv uosc"
    FAILED_PACKAGES+=("mpv-uosc")
  fi
}

# Function to install rustup
install_rustup() {
  print_status "Installing rustup..."

  if command -v rustup &>/dev/null; then
    print_success "rustup is already installed"
    return 0
  fi

  if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; then
    print_success "rustup installed successfully"
    # Source the cargo environment
    source ~/.cargo/env 2>/dev/null || true
  else
    print_error "Failed to install rustup"
    FAILED_PACKAGES+=("rustup")
  fi
}

# Function to print final summary
print_summary() {
  echo
  echo "=============================================="
  echo "           INSTALLATION SUMMARY"
  echo "=============================================="

  if [[ ${#FAILED_PACKAGES[@]} -eq 0 && ${#FAILED_SERVICES[@]} -eq 0 ]]; then
    print_success "All installations and services completed successfully!"
  else
    if [[ ${#FAILED_PACKAGES[@]} -gt 0 ]]; then
      print_error "Failed to install the following packages:"
      for package in "${FAILED_PACKAGES[@]}"; do
        echo "  - $package"
      done
    fi

    if [[ ${#FAILED_SERVICES[@]} -gt 0 ]]; then
      print_error "Failed to enable the following services:"
      for service in "${FAILED_SERVICES[@]}"; do
        echo "  - $service"
      done
    fi
  fi

  echo
  print_status "Setup script completed. Please reboot your system to ensure all changes take effect."
}

# Main execution
main() {
  echo "=============================================="
  echo "        ARCH LINUX SETUP SCRIPT"
  echo "=============================================="
  echo

  # Check if packages directory exists
  if [[ ! -d "packages" ]]; then
    print_error "packages/ directory not found in current directory"
    print_error "Please run this script from the directory containing the packages/ folder"
    exit 1
  fi

  # Execute all functions in order
  check_internet
  check_sudo
  select_gpu
  enable_multilib
  system_update
  setup_reflector
  install_yay
  install_packages
  enable_system_services
  enable_user_services
  install_uv
  install_mpv_uosc
  install_rustup
  print_summary
}

# Run the main function
main "$@"
